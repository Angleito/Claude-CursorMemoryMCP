[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mem0ai"
version = "0.1.0"
description = "Advanced memory management system with pgvector optimization"
authors = [{name = "mem0ai Team"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.ruff]
# Ruff configuration
target-version = "py38"
line-length = 88
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "N",      # pep8-naming
    "S",      # flake8-bandit
    "T20",    # flake8-print
    "SIM",    # flake8-simplify
    "RUF",    # Ruff-specific rules
    "D",      # pydocstyle
    "PL",     # Pylint
    "TCH",    # flake8-type-checking
    "C90",    # mccabe
    "ERA",    # eradicate
    "PGH",    # pygrep-hooks
    "FLY",    # flynt
    "PIE",    # flake8-pie
    "G",      # flake8-logging-format
]
ignore = [
    "E501",   # Line too long (handled by black)
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D107",   # Missing docstring in __init__
    "S101",   # Use of assert
    "S608",   # Possible SQL injection vector through string-based query construction
    "B008",   # Do not perform function calls in argument defaults
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Use of assert
    "PLR2004", # Magic value used in comparison
    "D",      # Disable all docstring checks for tests
]
"scripts/**/*.py" = [
    "T20",    # Allow print statements in scripts
]

[tool.ruff.isort]
known-first-party = ["mem0ai", "src", "auth", "security", "monitoring"]
force-single-line = true

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pydocstyle]
convention = "google"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | logs
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "asyncpg.*",
    "numpy.*",
    "psutil.*",
    "openai.*",
    "cohere.*",
    "transformers.*",
    "sentence_transformers.*",
    "torch.*",
    "sklearn.*",
    "faiss.*",
    "nltk.*",
    "Levenshtein.*",
    "jellyfish.*",
    "blosc2.*",
    "lz4.*",
    "pickle5.*",
    "aiohttp.*",
    "redis.*",
    "prometheus_client.*",
    "boto3.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
]

[tool.coverage.run]
source = ["src", "auth", "security", "monitoring"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
# Will be configured in .bandit file

[tool.vulture]
min_confidence = 80
paths = ["src", "auth", "security", "monitoring"]
exclude = ["logs/", "venv/", "env/"]