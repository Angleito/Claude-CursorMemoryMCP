[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mem0ai"
version = "0.1.0"
description = "Advanced memory management system with pgvector optimization"
authors = [{name = "mem0ai Team"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"  # Python 3.12+ recommended for optimal performance
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    # Core dependencies for mem0ai pgvector optimization
    "asyncpg>=0.28.0",
    "numpy>=1.24.0",
    "psutil>=5.9.0",
    # Web framework and API
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
    # Database and vector operations
    "pgvector>=0.2.3",
    "supabase>=2.0.0",
    # Machine learning and embeddings
    "openai>=1.0.0",
    "cohere>=4.0.0",
    "transformers>=4.30.0",
    "sentence-transformers>=2.2.0",
    "torch>=2.0.0",
    "scikit-learn>=1.3.0",
    "faiss-cpu>=1.7.4",
    # Text processing and similarity
    "nltk>=3.8.0",
    "Levenshtein>=0.21.0",
    "jellyfish>=0.11.0",
    # Compression and serialization
    "blosc2>=2.2.0",
    "lz4>=4.3.0",
    "pickle5>=0.0.12",
    # Async and concurrency
    "aiohttp>=3.8.0",
    "redis>=4.5.0",
    # Authentication and security
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    "cryptography>=41.0.0",
    # Real-time features
    "sse-starlette>=1.6.0",
    # Logging and monitoring
    "structlog>=23.2.0",
    "prometheus-client>=0.17.0",
    # Environment and configuration
    "python-dotenv>=1.0.0",
    # Cloud storage (optional)
    "boto3>=1.26.0",
]

[project.optional-dependencies]
dev = [
    # Development and linting dependencies
    # Core linting and formatting
    "ruff>=0.1.9",
    "black>=23.12.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    # Security scanning
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.45.0",
    # Code quality tools
    "vulture>=2.10",
    "radon>=6.0.1",
    "xenon>=0.9.1",
    "mccabe>=0.7.0",
    # Pre-commit and hooks
    "pre-commit>=3.6.0",
    "detect-secrets>=1.4.0",
    # Testing framework
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-benchmark>=4.0.0",
    "coverage[toml]>=7.3.0",
    # Type checking support
    "types-redis>=4.6.0",
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.0",
    # Documentation tools
    "doc8>=1.1.1",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    # Development utilities
    "tox>=4.11.0",
    "nox>=2023.4.22",
    # Jupyter support (if needed)
    "notebook>=7.0.0",
    "ipykernel>=6.25.0",
    # Performance profiling
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.1",
    # Database testing
    "pytest-postgresql>=5.0.0",
    # HTTP testing
    "httpx>=0.25.0",
    "respx>=0.20.0",
    # Build tools
    "build>=1.0.0",
    "wheel>=0.42.0",
    "twine>=4.0.0",
    # Debugging tools
    "pdbpp>=0.10.3",
    "ipdb>=0.13.13",
    # Code analysis
    "flake8>=6.1.0",
    "pylint>=3.0.0",
    # SQL tools
    "sqlfluff>=3.0.0",
    # YAML/JSON tools
    "yamllint>=1.33.0",
    "jsonschema>=4.20.0",
    # Container tools (hadolint-py not available, use hadolint binary instead)
    # Git tools
    "gitpython>=3.1.40",
    # Monitoring and metrics (dev)
    "prometheus-client>=0.19.0",
    # Async development tools
    "aiofiles>=23.2.1",
    "aioresponses>=0.7.4",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-benchmark>=4.0.0",
    "coverage[toml]>=7.3.0",
    "httpx>=0.25.0",
    "respx>=0.20.0",
    "pytest-postgresql>=5.0.0",
]

[tool.ruff]
# Ruff configuration
target-version = "py312"
line-length = 88
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "N",      # pep8-naming
    "S",      # flake8-bandit
    "T20",    # flake8-print
    "SIM",    # flake8-simplify
    "RUF",    # Ruff-specific rules
    "D",      # pydocstyle
    "PL",     # Pylint
    "TCH",    # flake8-type-checking
    "C90",    # mccabe
    "ERA",    # eradicate
    "PGH",    # pygrep-hooks
    "FLY",    # flynt
    "PIE",    # flake8-pie
    "G",      # flake8-logging-format
]
ignore = [
    "E501",   # Line too long (handled by black)
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D107",   # Missing docstring in __init__
    "S101",   # Use of assert
    "S608",   # Possible SQL injection vector through string-based query construction
    "B008",   # Do not perform function calls in argument defaults
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Use of assert
    "PLR2004", # Magic value used in comparison
    "D",      # Disable all docstring checks for tests
]
"scripts/**/*.py" = [
    "T20",    # Allow print statements in scripts
]

[tool.ruff.isort]
known-first-party = ["mem0ai", "src", "auth", "security", "monitoring"]
force-single-line = true

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pydocstyle]
convention = "google"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | logs
)/
'''

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "asyncpg.*",
    "numpy.*",
    "psutil.*",
    "openai.*",
    "cohere.*",
    "transformers.*",
    "sentence_transformers.*",
    "torch.*",
    "sklearn.*",
    "faiss.*",
    "nltk.*",
    "Levenshtein.*",
    "jellyfish.*",
    "blosc2.*",
    "lz4.*",
    "pickle5.*",
    "aiohttp.*",
    "redis.*",
    "prometheus_client.*",
    "boto3.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
]

[tool.coverage.run]
source = ["src", "auth", "security", "monitoring"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "venv", "env", ".venv", "logs"]
skips = ["B101", "B601"]

[tool.vulture]
min_confidence = 80
paths = ["src", "auth", "security", "monitoring"]
exclude = ["logs/", "venv/", "env/"]

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["mem0ai", "src", "auth", "security", "monitoring"]
known_third_party = ["fastapi", "asyncpg", "redis", "openai", "cohere"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
max-complexity = 12
per-file-ignores = [
    "tests/*.py:S101,PLR2004",
    "scripts/*.py:T20"
]

[tool.pylint.main]
load-plugins = ["pylint.extensions.docparams"]

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
]

[tool.pylint.format]
max-line-length = 88

[tool.safety]
ignore = []
output = "json"

[tool.detect-secrets]
version = "1.4.0"
exclude_files = "^(logs/|venv/|env/|\\.venv/|htmlcov/|reports/|build/|dist/)"

[tool.radon]
cc_min = "B"
mi_min = "B"

[tool.xenon]
max_absolute = "B"
max_modules = "B"
max_average = "A"

# UV Configuration
[tool.uv]
dev-dependencies = [
    # Core linting and formatting
    "ruff>=0.1.9",
    "black>=23.12.0",
    "isort>=5.13.0",
    "mypy>=1.8.0",
    # Security scanning
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.45.0",
    # Code quality tools
    "vulture>=2.10",
    "radon>=6.0.1",
    "xenon>=0.9.1",
    "mccabe>=0.7.0",
    # Pre-commit and hooks
    "pre-commit>=3.6.0",
    "detect-secrets>=1.4.0",
    # Testing framework
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-benchmark>=4.0.0",
    "coverage[toml]>=7.3.0",
    # Type checking support
    "types-redis>=4.6.0",
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.0",
    # Documentation tools
    "doc8>=1.1.1",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    # Development utilities
    "tox>=4.11.0",
    "nox>=2023.4.22",
    # Jupyter support (if needed)
    "notebook>=7.0.0",
    "ipykernel>=6.25.0",
    # Performance profiling
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.1",
    # Database testing
    "pytest-postgresql>=5.0.0",
    # HTTP testing
    "httpx>=0.25.0",
    "respx>=0.20.0",
    # Build tools
    "build>=1.0.0",
    "wheel>=0.42.0",
    "twine>=4.0.0",
    # Debugging tools
    "pdbpp>=0.10.3",
    "ipdb>=0.13.13",
    # Code analysis
    "flake8>=6.1.0",
    "pylint>=3.0.0",
    # SQL tools
    "sqlfluff>=3.0.0",
    # YAML/JSON tools
    "yamllint>=1.33.0",
    "jsonschema>=4.20.0",
    # Container tools (hadolint-py not available, use hadolint binary instead)
    # Git tools
    "gitpython>=3.1.40",
    # Monitoring and metrics (dev)
    "prometheus-client>=0.19.0",
    # Async development tools
    "aiofiles>=23.2.1",
    "aioresponses>=0.7.4",
]

# UV workspace configuration
[tool.uv.workspace]
members = ["."]

# UV source configuration for faster installs
[tool.uv.sources]