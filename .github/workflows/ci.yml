name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.13"
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Cache pre-commit hooks
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Run Ruff (linting)
      run: |
        uv run ruff check . --format=github
        uv run ruff format --check .

    - name: Run Black (formatting check)
      run: uv run black --check --diff .

    - name: Run isort (import sorting)
      run: uv run isort --check-only --diff .

    - name: Run MyPy (type checking)
      run: uv run mypy src/ auth/ security/ monitoring/ --ignore-missing-imports

    - name: Run Bandit (security)
      run: uv run bandit -r . -f json -o bandit-report.json || true

    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results-${{ matrix.python-version }}
        path: bandit-report.json

    - name: Run Safety (dependency check)
      run: uv run safety check --json --output safety-report.json || true

    - name: Upload Safety results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-results-${{ matrix.python-version }}
        path: safety-report.json

    - name: Run Vulture (dead code detection)
      run: uv run vulture src/ auth/ security/ monitoring/ --min-confidence 80

    - name: Run complexity checks
      run: |
        uv run radon cc src/ auth/ security/ monitoring/ -a
        uv run xenon --max-absolute B --max-modules B --max-average A src/ auth/ security/ monitoring/

  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_DB: mem0ai_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Set up test database
      run: |
        PGPASSWORD=test_pass psql -h localhost -U test_user -d mem0ai_test -f setup_pgvector.sql
        PGPASSWORD=test_pass psql -h localhost -U test_user -d mem0ai_test -f supabase_schema.sql
      env:
        PGHOST: localhost
        PGPORT: 5432
        PGUSER: test_user
        PGPASSWORD: test_pass
        PGDATABASE: mem0ai_test

    - name: Run tests with coverage
      run: |
        uv run pytest tests/ -v \
          --cov=src --cov=auth --cov=security --cov=monitoring \
          --cov-report=xml --cov-report=html --cov-report=term \
          --cov-fail-under=80 \
          --junitxml=pytest-results.xml
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/mem0ai_test
        REDIS_URL: redis://localhost:6379/0
        TEST_ENV: true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run Bandit security scan
      run: |
        uv run bandit -r . -f sarif -o bandit.sarif || true

    - name: Upload Bandit SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit.sarif

    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"

    - name: Upload Semgrep SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  docker:
    name: Docker Build & Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: mem0ai:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Hadolint (Dockerfile linting)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint.sarif

    - name: Upload Hadolint SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint.sarif

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'mem0ai:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Run performance benchmarks
      run: |
        uv run pytest tests/benchmarks/ -v --benchmark-json=benchmark.json

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Generate documentation
      run: |
        uv run sphinx-build -b html docs/ docs/_build/html

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker]
    if: always()
    steps:
    - name: Notify on success
      if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.security.result == 'success' && needs.docker.result == 'success' }}
      run: echo "✅ All checks passed!"

    - name: Notify on failure
      if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.security.result == 'failure' || needs.docker.result == 'failure' }}
      run: |
        echo "❌ Some checks failed:"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Test: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Docker: ${{ needs.docker.result }}"
        exit 1