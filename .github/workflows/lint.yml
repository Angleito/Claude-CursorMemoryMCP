name: Lint and Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run Ruff (linter)
        run: |
          uv run ruff check . --output-format=github
          uv run ruff format --check .

      - name: Run Black (formatter check)
        run: |
          uv run black --check --diff .

      - name: Run isort (import sorting check)
        run: |
          uv run isort --check-only --diff .

      - name: Run MyPy (type checking)
        run: |
          uv run mypy src/ auth/ security/ monitoring/ --ignore-missing-imports

      - name: Run Bandit (security linting)
        run: |
          uv run bandit -r . -f json -o bandit-report.json
          uv run bandit -r . -f txt

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results-py${{ matrix.python-version }}
          path: bandit-report.json

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run Bandit (security)
        run: |
          uv run bandit -r . -f sarif -o bandit.sarif
        continue-on-error: true

      - name: Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: bandit.sarif

      - name: Run Safety (dependency vulnerabilities)
        run: |
          uv run safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload Safety results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-results
          path: safety-report.json

      - name: Run Semgrep
        run: |
          uv run semgrep --config=auto --json --output=semgrep.json .
        continue-on-error: true

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep.json

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run Vulture (dead code detection)
        run: |
          uv run vulture src/ auth/ security/ monitoring/ --min-confidence 80

      - name: Run Radon (complexity analysis)
        run: |
          uv run radon cc src/ auth/ security/ monitoring/ -a
          uv run radon mi src/ auth/ security/ monitoring/

      - name: Run Xenon (complexity monitoring)
        run: |
          uv run xenon --max-absolute B --max-modules A --max-average A src/ auth/ security/ monitoring/

  docker-lint:
    name: Docker Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

      - name: Run Hadolint on app Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: app/Dockerfile
          failure-threshold: warning

  shell-lint:
    name: Shell Script Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          severity: warning

  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run yamllint
        run: |
          uv run yamllint .

  sql-lint:
    name: SQL Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run SQLFluff
        run: |
          uv run sqlfluff lint --dialect postgres *.sql config/postgres/*.sql

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run pre-commit
        run: |
          uv run pre-commit run --all-files